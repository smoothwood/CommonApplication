// <auto-generated />
using System;
using Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Web.Migrations
{
    [DbContext(typeof(CommonApplicationContext))]
    [Migration("20190215115617_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Core.Entities.Article", b =>
                {
                    b.Property<int>("ArticleId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId");

                    b.Property<string>("ContentUrl");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<string>("ImageUrl");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("ArticleId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Articles");

                    b.HasData(
                        new
                        {
                            ArticleId = 1,
                            CategoryId = 1,
                            ContentUrl = "http://i1.haidii.com/v/1517537102/i1/images/dict_search_logo.png",
                            CreatedDate = new DateTime(2019, 2, 15, 19, 56, 15, 910, DateTimeKind.Local).AddTicks(6000),
                            Description = "article1 description",
                            ImageUrl = "http://i1.haidii.com/v/1517537102/i1/images/dict_search_logo.png",
                            Title = "article1"
                        },
                        new
                        {
                            ArticleId = 2,
                            CategoryId = 4,
                            ContentUrl = "http://i1.haidii.com/v/1517537102/i1/images/dict_search_logo.png",
                            CreatedDate = new DateTime(2019, 2, 15, 19, 56, 15, 910, DateTimeKind.Local).AddTicks(9958),
                            Description = "article2 description",
                            ImageUrl = "http://i1.haidii.com/v/1517537102/i1/images/dict_search_logo.png",
                            Title = "article2"
                        },
                        new
                        {
                            ArticleId = 3,
                            CategoryId = 4,
                            ContentUrl = "http://i1.haidii.com/v/1517537102/i1/images/dict_search_logo.png",
                            CreatedDate = new DateTime(2019, 2, 15, 19, 56, 15, 911, DateTimeKind.Local).AddTicks(13),
                            Description = "article3 description",
                            ImageUrl = "http://i1.haidii.com/v/1517537102/i1/images/dict_search_logo.png",
                            Title = "article3"
                        },
                        new
                        {
                            ArticleId = 4,
                            CategoryId = 4,
                            ContentUrl = "http://i1.haidii.com/v/1517537102/i1/images/dict_search_logo.png",
                            CreatedDate = new DateTime(2019, 2, 15, 19, 56, 15, 911, DateTimeKind.Local).AddTicks(15),
                            Description = "article4 description",
                            ImageUrl = "http://i1.haidii.com/v/1517537102/i1/images/dict_search_logo.png",
                            Title = "article4"
                        },
                        new
                        {
                            ArticleId = 5,
                            CategoryId = 5,
                            ContentUrl = "http://i1.haidii.com/v/1517537102/i1/images/dict_search_logo.png",
                            CreatedDate = new DateTime(2019, 2, 15, 19, 56, 15, 911, DateTimeKind.Local).AddTicks(16),
                            Description = "article5 description",
                            ImageUrl = "http://i1.haidii.com/v/1517537102/i1/images/dict_search_logo.png",
                            Title = "article5"
                        },
                        new
                        {
                            ArticleId = 6,
                            CategoryId = 2,
                            ContentUrl = "http://i1.haidii.com/v/1517537102/i1/images/dict_search_logo.png",
                            CreatedDate = new DateTime(2019, 2, 15, 19, 56, 15, 911, DateTimeKind.Local).AddTicks(18),
                            Description = "article6 description",
                            ImageUrl = "http://i1.haidii.com/v/1517537102/i1/images/dict_search_logo.png",
                            Title = "article6"
                        },
                        new
                        {
                            ArticleId = 7,
                            CategoryId = 3,
                            ContentUrl = "http://i1.haidii.com/v/1517537102/i1/images/dict_search_logo.png",
                            CreatedDate = new DateTime(2019, 2, 15, 19, 56, 15, 911, DateTimeKind.Local).AddTicks(20),
                            Description = "article7 description",
                            ImageUrl = "http://i1.haidii.com/v/1517537102/i1/images/dict_search_logo.png",
                            Title = "article7"
                        });
                });

            modelBuilder.Entity("Core.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName")
                        .IsRequired();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<int>("ParentCategoryId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "新人培训资料库",
                            CreatedDate = new DateTime(2019, 2, 15, 19, 56, 15, 910, DateTimeKind.Local).AddTicks(2658),
                            ParentCategoryId = 0
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "基础营养知识库",
                            CreatedDate = new DateTime(2019, 2, 15, 19, 56, 15, 910, DateTimeKind.Local).AddTicks(5304),
                            ParentCategoryId = 0
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryName = "迷思与常用话术库",
                            CreatedDate = new DateTime(2019, 2, 15, 19, 56, 15, 910, DateTimeKind.Local).AddTicks(5329),
                            ParentCategoryId = 0
                        },
                        new
                        {
                            CategoryId = 4,
                            CategoryName = "基础营养知识库-子分类1",
                            CreatedDate = new DateTime(2019, 2, 15, 19, 56, 15, 910, DateTimeKind.Local).AddTicks(5330),
                            ParentCategoryId = 2
                        },
                        new
                        {
                            CategoryId = 5,
                            CategoryName = "基础营养知识库-子分类2",
                            CreatedDate = new DateTime(2019, 2, 15, 19, 56, 15, 910, DateTimeKind.Local).AddTicks(5331),
                            ParentCategoryId = 2
                        });
                });

            modelBuilder.Entity("Core.Entities.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<string>("RoleName")
                        .IsRequired();

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            CreatedDate = new DateTime(2019, 2, 15, 19, 56, 15, 894, DateTimeKind.Local).AddTicks(1677),
                            Description = "管理员",
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleId = 2,
                            CreatedDate = new DateTime(2019, 2, 15, 19, 56, 15, 895, DateTimeKind.Local).AddTicks(8909),
                            Description = "公司员工",
                            RoleName = "Employee"
                        });
                });

            modelBuilder.Entity("Core.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime?>("DateOfBirth");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<bool?>("Gender");

                    b.Property<string>("LastName");

                    b.Property<string>("LoginId")
                        .IsRequired();

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("Portait");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Active = true,
                            CreatedDate = new DateTime(2019, 2, 15, 19, 56, 15, 896, DateTimeKind.Local).AddTicks(627),
                            Email = "ycm@outlook.com",
                            FirstName = "丞民",
                            LastName = "杨",
                            LoginId = "ycm@outlook.com",
                            Password = "???F?S???^H[??4"
                        },
                        new
                        {
                            UserId = 2,
                            Active = true,
                            CreatedDate = new DateTime(2019, 2, 15, 19, 56, 15, 904, DateTimeKind.Local).AddTicks(9045),
                            Email = "12345929@qq.com",
                            FirstName = "悟空",
                            LastName = "孙",
                            LoginId = "12345929@qq.com",
                            Password = "?qc????p0??AR"
                        });
                });

            modelBuilder.Entity("Core.Entities.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("RoleId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRole");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2019, 2, 15, 19, 56, 15, 905, DateTimeKind.Local).AddTicks(801),
                            RoleId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2019, 2, 15, 19, 56, 15, 905, DateTimeKind.Local).AddTicks(4759),
                            RoleId = 2,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2019, 2, 15, 19, 56, 15, 905, DateTimeKind.Local).AddTicks(4793),
                            RoleId = 2,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Core.Entities.Article", b =>
                {
                    b.HasOne("Core.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Entities.UserRole", b =>
                {
                    b.HasOne("Core.Entities.Role", "Role")
                        .WithMany("userRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Entities.User", "User")
                        .WithMany("userRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
